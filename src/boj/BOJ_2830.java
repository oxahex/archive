package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


/**
 * @date    2023-07-18
 * @title   행성 X3(2830) G3
 * @tags    수학, 비트마스킹
 * @input
 * 첫째 줄에 X3 거주민의 수 N이 주어진다. (1 ≤ N ≤ 1,000,000)
 * 다음 N개의 줄에는 거주민의 이름이 주어진다.
 * 이름은 1,000,000보다 작거나 같은 자연수이다.
 * @output
 * 첫째 줄에 행성 X3의 가치를 출력한다.
 */
public class BOJ_2830 {

    /**
     * <pre>
     *     input이 최대 1,000,000개 이므로, O(N)에 근접한 복잡도를 가져야 패스가 가능하다.
     *     단순히 주어지는 모든 자연수의 조합을 XOR 계산 후 모두 더하면 O(N^2) 정도 되기 떄문에 풀 수 없고
     *     O(N)에 가까운 복잡도를 가지도록 하는 풀이 방식을 찾아야 함.
     *
     *     비트 마스킹 방식으로 가능...
     *     총 합을 구하면 되기 떄문에 각 XOR의 결과는 알 필요가 없음.
     *     XOR 연산의 경우 자릿수별로 나누어 풀 수 있다.
     *
     *     (7, 3, 5)의 경우
     *     --------------
     *     7    1   1   1
     *     3    0   1   1
     *     5    1   0   1
     *     --------------
     *     7 XOR 3  ->  1   0   0
     *     7 XOR 5  ->  0   1   0
     *     3 XOR 5  ->  1   1   0
     *     ----------------------
     *     (1, 0) or (0, 1) -> 1
     *     (0, 0) or (1, 1) -> 0
     *     각 자리수에서 비교할 수 있는 1과 0 조합은 다음과 같다.
     *     -----------------------------------------
     *                  2^2       2^1       2^0
     *     7 XOR 3  ->  1(1, 0)   0(1, 1)   0(1, 1)
     *     7 XOR 5  ->  0(1, 1)   1(1, 0)   0(1, 1)
     *     3 XOR 5  ->  1(0, 1)   1(1, 0)   0(1, 1)
     *                  2         2         0
     *     ----------------------------------------
     *     2^2 자리   -> 1이 2개, 0이 1개 주어짐, (1, 0) 또는 (0, 1)이 나오는 경우의 수: 2
     *     2^1 자리   -> 1이 2개, 0이 1개 주어짐, (1, 0) 또는 (0, 1)이 나오는 경우의 수: 2
     *     2^0 자리   -> 1이 0개, 0이 3개 주어짐, (1, 0) 또는 (0, 1)이 나오는 경우의 수: 0
     *     -------------------------------------------------------------------
     *     각 자리수마다 (1, 0) 또는 (0, 1)이 나오는 경우의 수는 (1의 개수) * (0의 개수)
     *     (2 * 2^2) + (2 * 2^1) + (0 * 2^0) = 8 + 4 + 0 = 12 로도 답을 구할 수 있다.
     *     --------------------------------------------------------------------
     *
     *     다른 문제
     *      - Math.pow(2^i) 문제  -> (1L << i)로 계산, Math.pow(); 계산 시 오류가 생기는 이유?
     *      - bw.write(); 시 long 타입을 인자로 넣을 수 없음. 왜?
     * </pre>
     * */
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());

        int[] bits = new int[20];
        for (int i = 0; i < n; i++) {
            int name = Integer.parseInt(br.readLine());

            int idx = 0;
            while (name > 0) {
                bits[idx++] += name % 2;
                name /= 2;
            }
        }

        long answer = 0L;
        for (int i = 0; i < 20; i++) {
            answer += (1L << i) * bits[i] * (n - bits[i]);
        }

        System.out.println(answer);
        br.close();
    }
}
